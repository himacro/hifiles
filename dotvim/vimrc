source $VIMRUNTIME/vimrc_example.vim
if $LANG == 'zh_CN' && has('win32') 
" Chinese for Windows
    set encoding=utf-8
    set langmenu=zh_CN.utf-8
    language messages zh_cn.utf-8
    if has('gui')
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
    endif
endif
 
" enable pathogen for easy to install plugins and
" runtime files in their own private direcotries.
call pathogen#infect()

" Core settings
set nocompatible
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese
set ambiwidth=double
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set smartindent
set number
set nowrap
set incsearch
set ignorecase
set backspace=indent,eol,start
filetype indent plugin on
syntax enable
set nobackup

" messages and info
set showmode
set ruler
set helplang=cn

" tags

" Colorscheme
set background=dark
"" solarized setting
if $TERM_PALETTE == 'SOLARIZED'
    set t_Co=16
    let g:solarized_termcolors=16
    colorscheme solarized
elseif &t_Co == 256
    let g:solarized_termcolors=256
    colorscheme solarized
else
    colorscheme desert
endif

" multiple windows
" set statusline=%F%m%r,%Y,%{&fileformat}\ \ \ ASCII=\%b,HEX=\%B\ \ \ %l,%c%V\ %p%%\ \ \ [\ %L\ lines\ in\ all\ ]
set laststatus=2
set splitbelow
set splitright
set hidden

" terminal

" diff mode
set diffexpr=MyDiff()
function! MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

" plugins
let g:vimim_punctuation=0
"" SuperTab
let g:SuperTabDefaultCompletionType="context"
let g:SuperTabContextDefaultCompletionType="<c-p>"
"" SnipMate
let g:snipMateAllowMatchingDot = 0
"" PowerLine
"let g:Powerline_symbols = 'fancy'

" mapping
nmap <F2> :NERDTreeToggle<CR> 
nmap <F3> :TagbarToggle<CR>
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

